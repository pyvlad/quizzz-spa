# "upstream" 
#       defines a group of servers which can be used in 'proxy_pass' directive.
# "max_fails[=1]" 
#       defines number of "failed requests" during "fail_timeout[=10]" seconds.
#       When it happens, given server is disabled for "fail_timeout" seconds.
#       By default, 'failed request' means connection/read error or request timeout.
# Below, "max_fails" and "fail_timeout" are set to defaults, but maybe adjust them?
# More on params: https://nginx.org/en/docs/http/ngx_http_upstream_module.html#server

upstream wsgi_app {
    server {{ nginx__wsgi_host}}:{{ nginx__wsgi_port }} max_fails=1 fail_timeout=10;
}


# "server_name"
#       determines which server block is used for a given request
#       (it may be an exact name, wildcard name, or a regular expression)
#       https://nginx.org/en/docs/http/server_names.html
# "keepalive_timeout[=10]" 
#       defines number of seconds during which an inactive connection 
#       to a group of servers won't be closed.

server {
    listen              80;
    listen              [::]:80;
    server_name         {{ nginx__http_host }};


  {% if nginx__use_ssl %}
    rewrite             ^(.*) https://$server_name$1 permanent;
}

server {
    listen              443 ssl;
    server_name         {{ nginx__http_host }};

    ssl_certificate     {{ nginx__ssl_crt }};
    ssl_certificate_key {{ nginx__ssl_key }};
    ssl_protocols       TLSv1.2;
  {% endif %}


    access_log          /var/log/nginx/{{ nginx__project_name }}.access.log;
    error_log           /var/log/nginx/{{ nginx__project_name }}.error.log info;

    keepalive_timeout   5;

    root                {{ nginx__static_root }};
    location / {
        # "try_files": 
        # a. serve the path given in the request URL as a file ($uri)
        # b. (if a file does not exist) serve the path as a directory ($uri/)
        # c. (if neither of the two options work) return index.html
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }
    location /static {  
        expires 1y;
        add_header Cache-Control "public";
    }
    location /api {
        proxy_pass          http://wsgi_app;
        include proxy_params;
        # 'proxy_params' is a file at /etc/nginx/proxy_params, which contains:
        # proxy_set_header    Host $http_host;
        # proxy_set_header    X-Real-IP $remote_addr;
        # proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header    X-Forwarded-Proto $scheme;
    }

    # Above configurations is based on:
    # - https://nginx.org/ru/docs/beginners_guide.html
    # - https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
    # - https://stackoverflow.com/a/10647080 (difference between "alias" and "root")
    
    # "root" directive is used outside of 'locations' so that both "/" and "/static" used it.

    # Nginx serves location with the longest matched prefix, 
    # so '/api' will be applied before '/'.

    # If a request ends with a slash, NGINX treats it as a request for a directory 
    # and tries to find an index file in the directory. 
    # The index directive defines the index fileâ€™s name (the default value is index.html). 
    # To continue with the example, if the request URI is /images/some/path/, 
    # NGINX delivers the file /www/data/images/some/path/index.html if it exists. 
    # If it does not, NGINX returns HTTP code 404 (Not Found) by default. 
    # (src: https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/)

    # Caching is configured based on Miguel Grinberg's:
    # https://blog.miguelgrinberg.com/post/how-to-deploy-a-react--flask-project
    # and 
    # https://create-react-app.dev/docs/production-build/#static-file-caching

    # ### Miguel Grinberg's config ###
    # # by default, serve static files from the root directory:
    # root                {{ nginx__static_root }};
    # index               index.html;

    # location / {
    #     # "try_files": 
    #     # a. serve the path given in the request URL as a file ($uri)
    #     # b. (if a file does not exist) serve the path as a directory ($uri/)
    #     # c. (if neither of the two options work) return a 404 error
    #     try_files $uri $uri/ =404;
    # }

    # location /api {
    #     # use common definitions that are used when nginx acts as a reverse proxy:
    #     include proxy_params;
    #     # the address where the proxied service is listening for requests:
    #     proxy_pass          http://{{ nginx__wsgi_host}}:{{ nginx__wsgi_port }};
    # }
    # ### end Miguel Grinberg's config ###
}