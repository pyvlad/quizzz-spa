---
# Postgresql
# Notes:
# a. <postgresql> is a meta package that depends on the currently supported version.
#    Currently supported versions package depends on:
#    libpq5 libsensors4 postgresql-client-12 postgresql-client-common postgresql-common ssl-cert sysstat
#    https://packages.ubuntu.com/focal/postgresql-12
# b. <libpq-dev> is required by psycopg2 and pg_config
# c. Installation of <postgresql> includes:
#    $ /usr/lib/postgresql/12/bin/initdb -D /var/lib/postgresql/12/main --auth-local peer --auth-host md5
#    The files belonging to this database system will be owned by user "postgres".
#    This user must also own the server process.

- name: "Install PostgreSQL database"
  become: true

  block:
  - name: "Check that expected variables have been passed"
    assert:
      that:
        - postgres__version is defined
        - postgres__user is defined
        - postgres__database is defined

  - name: "Ensure required PostgreSQL packages are installed"
    apt:
      name: "{{ item }}"
      state: "present"
      update_cache: yes
    loop:
      - "postgresql-{{ postgres__version }}"
      - "libpq-dev"
      - "acl"   
      # "acl" is needed for ansible to become an unprivileged user (in configuration below) 
      # see https://github.com/georchestra/ansible/issues/55

  - name: "Make sure postgres' bash_profile exists"
    file:
      path: "{{ postgres__bash_profile_filepath }}"
      state: "touch"

  - name: "Populate postgres' bash_profile"
    lineinfile:
      dest: "{{ postgres__bash_profile_filepath }}"
      state: "present"
      regexp: "^{{ item.key }}="
      line: "export {{ item.key }}={{ item.value}}"
    with_items: "{{ postgres__db_environment }}"


- name: "Configure Postgresql"
  become: true
  become_user: postgres
  become_flags: '--login'

  block:
  - name: "Check if user's role exists"
    shell: psql -tc "SELECT 1 FROM pg_roles WHERE rolname='{{ postgres__user }}'" | grep -q 1
    register: postgres__is_role_created
    ignore_errors: true

  - name: "Ensure user's role is created"
    shell: "createuser {{ postgres__user }}"
    when: postgres__is_role_created is failed

  - name: "Check if app's database exists"
    shell: psql -tc "SELECT 1 FROM pg_database WHERE datname = '{{ postgres__database }}'" | grep -q 1
    register: postgres__is_db_created
    ignore_errors: true

  # psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'my_db'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE my_db"
  - name: Ensure Postgres database is created
    shell: "createdb {{ postgres__database }} -O {{ postgres__user }}"
    when: postgres__is_db_created is failed
